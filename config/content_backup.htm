<h1>about</h1>
<p><strong>40823131 江建儒  </strong>Mr. <span class="Y2IQFc" lang="en">Tabby</span></p>
<p>倉儲:</p>
<p><a href="https://github.com/40823131/cd2021" title="cd2021 repositories"><img alt="" height="97" src="/images/githubbanner.png" width="292"/></a></p>
<p>網頁:</p>
<p><a href="https://40823131.github.io/cd2021/content/index.html" title="cd2021 pages"><img alt="" height="97" src="/images/github_pages_572846.jpg" width="292"/></a></p>
<p>分組網頁:</p>
<p><a href="https://40823131.github.io/stage3-ag1/" title="stage3 group pages"><img caption="false" height="127" src="/images/1540567821938.jpg" width="297"/></a></p>
<p>個人youtube:</p>
<p><a href="https://www.youtube.com/channel/UC_Otpnico_3aSyDmowCUGyg" title="40823131 youtube"><img alt="" height="125" src="/images/1280px-Logo_of_YouTube_(2015-2017).svg.png" width="297"/></a></p>
<p><strong>歷年網頁</strong></p>
<p>cp2019:<a href="https://40823131.github.io/cp2019/">https://40823131.github.io/cp2019/</a></p>
<p>wcm2020:<a href="https://40823131.github.io/wcm2020/">https://40823131.github.io/wcm2020/</a></p>
<p>cad2020:<a href="https://40823131.github.io/cad2020/">https://40823131.github.io/cad2020/</a></p>
<p>wvp2021:<a href="https://40823131.github.io/wvp2021/">https://40823131.github.io/wvp2021/</a></p>
<p></p>
<p><img alt="" height="626" src="/images/IMG_4100.jpg" width="335"/></p>
<h1>Stage1</h1>
<h2>W1</h2>
<h3>建立網頁</h3>
<p>利用<a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 樣板，建立網頁，步驟如下:</p>
<p>1.按下Use this template，即可建立新倉儲，命名為cd2021。<img alt="" height="586" src="/images/chrome_N1cCh3VRgh.png" width="1200"/></p>
<p>2.利用隨身系統，輸入指令</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git clone --recurse-submodules https://github.com/40823131/cd2021.git</pre>
<p>將cd2021 clone進指定資料夾。</p>
<p>注意:此時不可使用git clone指令clone倉儲，而需改用git clone --recurse-submodules，須使用後述指令之原因為，指定倉儲已有(cmsimde)子模版，而git clone則是用來clone未有(cmsimde)子模板的倉儲，再行安裝子模組。</p>
<p><img alt="" height="512" src="/images/cmd_SXQtUG7rZ6.png" width="979"/></p>
<p>3.進入cmsimde資料夾並輸入指令python wsgi.py，即可對網頁內容進行編輯。</p>
<p><img alt="" height="512" src="/images/cmd_eki6lyJprk.png" width="979"/></p>
<h3>Blog建立</h3>
<p>利用leo對pelican.leo檔案進行編輯，以達成創建Blog的目的，操作如我過往在wcm2020專案中所提到的作法:<a href="https://40823131.github.io/wcm2020/content/%E4%BD%BF%E7%94%A8Leo%20Editor%E7%B7%A8%E8%AD%AFpelican.leo%E5%BB%BA%E7%AB%8Bblog%E7%B6%B2%E8%AA%8C.html">https://40823131.github.io/wcm2020/content/%E4%BD%BF%E7%94%A8Leo%20Editor%E7%B7%A8%E8%AD%AFpelican.leo%E5%BB%BA%E7%AB%8Bblog%E7%B6%B2%E8%AA%8C.html</a></p>
<p>需修改之部分均相同，不同之處為需將上述網站教學內容中所有wcm2020的部分改為cd2021，即可完成創建部落格。</p>
<h2>W2</h2>
<h3>分組(二人專案小組)</h3>
<p><span>標題: </span><span>2021-協同產品設計實習-stage1-ag26</span></p>
<p><span>        專題題目:自動寵物飼料機</span></p>
<p>        第一位組員學號:<span>40823131 </span><span>| </span><span>Repository: </span><a href="https://github.com/40823131/cad2020">40823131</a><span><span> </span>| Site:<span> </span></span><a href="https://40823131.github.io/cad2020">40823131</a></p>
<p>        第二位組員學號:<span>40823116 </span><span>| Repository: <a href="https://github.com/40823116/cd2021">40823116</a><span><span> </span>| Site:<span> </span></span><a href="https://40823116.github.io/cd2021">40823116</a></span></p>
<h3>利用Hamachi建立虛擬區域網路</h3>
<p>利用Hamachi，達成協同編輯分組網站的目的。</p>
<p>首先需先下載Hamachi:<a href="https://www.vpn.net/">https://www.vpn.net/</a> </p>
<p>安裝後，可建立虛擬網路並設置密碼。</p>
<p><img alt="" height="391" src="/images/66666.png" width="460"/></p>
<p>將網路ID及密碼分享給組員，組員可借由連接上此虛擬區域網路，來達成就算在不同網域的情況下，也能夠借由連上組長的虛擬區網來進行小組網頁編輯。</p>
<p><img alt="" height="412" src="/images/1235555.png" width="276"/></p>
<p>在開啟小組網頁動態時的網址為https://[::]:9443</p>
<p>其中[::]其實就是組長的ipv6位址，取得方式如下。</p>
<p><img alt="" height="414" src="/images/amachi ipv6.png" width="275"/></p>
<p>將組長的ipv6位址取代網址中的[::]及可成功連上小組網頁動態進行編輯。</p>
<h3>利用虛擬主機建立Ethercalc伺服器</h3>
<p>使用的ubuntu版本為20.04</p>
<p><img alt="" height="392" src="/images/ubuntu20.04.png" width="700"/></p>
<p><strong>安裝curl</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sudo apt install curl</pre>
<p><img alt="" height="625" src="/images/ubuntu20.04-curl.png" width="700"/></p>
<p><strong>納入 Nodesource repository</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</pre>
<p><img alt="" height="626" src="/images/ubuntu20.04-ethercalc-Nodesource repository.png" width="700"/><br/><strong>安裝 node.js</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sudo apt install --assume-yes nodejs</pre>
<p><img alt="" height="605" src="/images/ubuntu20.04-ethercalc-nodejs.png" width="700"/></p>
<p><strong>安裝npm</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sudo apt install npm</pre>
<p><img alt="" height="626" src="/images/ubuntu20.04-npm.png" width="700"/></p>
<p><strong>安裝 ethercalc</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sudo npm install -g ethercalc</pre>
<p><img alt="" height="627" src="/images/ubuntu20.04-ethercalc.png" width="700"/><br/><strong>開啟ethercalc server</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">ethercalc</pre>
<p><img alt="" height="622" src="/images/ubuntu20.04-ethercalc-server.png" width="700"/></p>
<p><strong>使用firefox前往</strong> <a href="http://cd2021ag26:8000">http://cd2021ag26:8000</a> </p>
<p><img alt="" height="628" src="/images/ubuntu20.04-ethercalc-ok.png" width="700"/></p>
<h2>W3</h2>
<p>利用coppeliasim對已完成之成品進行模擬</p>
<h3>初代機(version 1.0.0) ฅ^•ω•^ฅ</h3>
<p>場景檔:<a href="https://drive.google.com/file/d/1flnM51QFMFAkOVgVQ6EJE0GaNEwl4Kb4/view?usp=sharing">https://drive.google.com/file/d/1flnM51QFMFAkOVgVQ6EJE0GaNEwl4Kb4/view?usp=sharing</a> </p>
<p>stl檔:<a href="https://drive.google.com/file/d/1OSYmHnWZztxp95ZPyKEOnh1jfADEdcgd/view?usp=sharing">https://drive.google.com/file/d/1OSYmHnWZztxp95ZPyKEOnh1jfADEdcgd/view?usp=sharing</a> </p>
<h3>貳代機(version 2.0.0) ^ↀᴥↀ^</h3>
<p>場景檔:<a href="https://drive.google.com/file/d/1zx1sQH35AiW-sQGoPBtUzH_rCZiGe6E_/view?usp=sharing">https://drive.google.com/file/d/1zx1sQH35AiW-sQGoPBtUzH_rCZiGe6E_/view?usp=sharing</a> </p>
<p>stl檔:<a href="https://drive.google.com/file/d/1om6qK5MmQifteyIR2raxF1kGzh5wU11E/view?usp=sharing">https://drive.google.com/file/d/1om6qK5MmQifteyIR2raxF1kGzh5wU11E/view?usp=sharing</a> </p>
<h3>参代機(version 3.0.0) ଲ(^ⓛ ω ⓛ^)ଲ</h3>
<p>場景檔:<a href="https://drive.google.com/file/d/1abmOlBmMaag_MNbuSYV6TcFEhF2tMd4a/view?usp=sharing">https://drive.google.com/file/d/1abmOlBmMaag_MNbuSYV6TcFEhF2tMd4a/view?usp=sharing</a> </p>
<p>stl檔:</p>
<h3>肆代機(version 4.0.0) V(=^･ω･^=)v</h3>
<p>場景檔:<a href="https://drive.google.com/file/d/122SyiBWZQpqqTPrJkhfHVHMAU9kx8AMN/view?usp=sharing">https://drive.google.com/file/d/122SyiBWZQpqqTPrJkhfHVHMAU9kx8AMN/view?usp=sharing</a> </p>
<p>stl檔:<a href="https://drive.google.com/file/d/1XN7ku3YdPHd53RKRVKYT9fSw2k-Rs_4s/view?usp=sharing">https://drive.google.com/file/d/1XN7ku3YdPHd53RKRVKYT9fSw2k-Rs_4s/view?usp=sharing</a> </p>
<h2>W4</h2>
<h3>利用程式方法更改影片檔名</h3>
<p><span>使用python程式編寫進而達到更改影片名稱的效果，藉由最後修改時間做為線索來判斷組別，依此線索先利用程式取得各檔案最後修改時間，將取得的時間加入檔名前端進行排序，最後再進行檔名修整，修整為所要的格式。 1.取得最後修改時間，將時間加入檔頭後，放入串列。 2.使用串列排序，排列後更名(階段性更名，此步驟重點為順序)。 3.更改為最終需要的檔名格式。</span></p>
<p><span>程式碼如下。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
#sorted:排序。
def renameFilesAndSortedByTime(dirPath):
    #建立空串列。
    newlist = []
    #獲取檔名列表。
    files = os.listdir(dirPath)
    #獲取新增修改時間的檔名列表。
    for j in files:
        #獲取從1970年1月1日上午12時00分到檔案最後修改的UTC時間總共經過多少秒。
        createTime = os.path.getmtime(dirPath + j)
        # 將createTime中取得的秒數加入文件名稱前方，並加入串列以利排序。
        newlist.append(str(int(createTime)) + "-" + j)

    # 將串列進行排序
    newlist = sorted(newlist)
    #印出串列
    print(newlist)
    # range()內的數字經由len(newlist)決定
    #len()主要用來傳回串列參數L的長度，也就是包含幾個元素。
    for i in range(len(newlist)):
        #newlist[i][11:]
        #[i]的意思為串列中的第i項。
        #[11:]是用來取得檔案名稱從第12字元開始到最後字元的檔名。
        #使用上述兩個方法再配合迴圈可取得串列內所有檔案的舊檔名。
        oldName = newlist[i][11:]

        # 將秒數部分修改為序號，得到新的文件名。
        # 一定要按照下列寫法否則後期排序更名會出現錯誤。
        newName = newlist[i][11:]
        if (i + 1) &lt; 10:
            newName = '00' + str(i + 1) + newName
        elif (i + 1) &gt; 9 and (i + 1) &lt; 100:
            newName = '0' + str(i + 1) + newName
        else:
            newName = str(i + 1) + newName
        # dirpath為目標文件資料夾。
        # 重命名文件照修改時間加序号在前方。
        os.rename(dirPath + oldName, dirPath + newName)

if __name__ == '__main__':
    renameFilesAndSortedByTime("C:/Users/Administrator/Downloads/2021-03_2a_stage1/")
    print("rename ok!")
    path = 'C:/Users/Administrator/Downloads/2021-03_2a_stage1/'
    #轉入目標文件夾。
    file=os.listdir(path)
    print(file) #印出讀取到的檔名稱。
    n=0 #設定初始值。
    for i in file: #因為資料夾裡面的檔案都要重新更換名稱。
        oldname=path+file[n] #path為路徑名稱，[n]表示第n個檔案。
        newname=path+'cd2021_2a_'+str(n+1)+'.mp4' 
        os.rename(oldname,newname)
        print(oldname+'&gt;'+newname) 
        n=n+1 

    </pre>
<p>youtube:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/8cxVGoyUiJM" title="YouTube video player" width="560"></iframe></p>
<h1>Stage2</h1>
<h2>W5</h2>
<h3>分組組員</h3>
<p><span>40823116 </span><span>| Repository: <a href="https://github.com/40823116/cd2021">40823116</a><span><span> </span>| Site:<span> </span></span><a href="https://40823116.github.io/cd2021">40823116</a></span></p>
<p><span>40823123 <span>| Repository: <a href="https://github.com/40823123/cd2021">40823123</a><span><span> </span>| Site:<span> </span></span><a href="https://40823123.github.io/cd2021">40823123</a></span></span></p>
<p><span>40823131 </span><span>| </span><span>Repository: </span><a href="https://github.com/40823131/cd2021">40823131</a><span><span> </span>| Site:<span> </span></span><a href="https://40823131.github.io/cd2021">40823131</a></p>
<p><span>40823136 </span><span>| </span><span>Repository: </span><a href="https://github.com/40823136/cd2021">40823136</a><span><span> </span>| Site:<span> </span></span><a href="https://40823136.github.io/cd2021">40823136</a></p>
<h2>W6</h2>
<h3>Heroku小組網站</h3>
<p><a href="https://stage2-ag11.herokuapp.com/content/index.html">https://stage2-ag11.herokuapp.com/content/index.html</a> </p>
<p><span>1.從 <a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a> 下載 Heroku CLI，</span><span>解開壓縮至隨身碟Y槽。</span></p>
<p>2.後修改start.bat檔案</p>
<p>3.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">heroku login -i
heroku git:remote -a 名稱</pre>
<h3>運輸小車繪製</h3>
<p>因為此次專案只有小車需繪製，所以仍採用Inventor(2018)進行繪製。</p>
<p>stl檔:<a href="https://drive.google.com/file/d/1HULgTeENzh3tGrNMneSqoOs3D_XNICU-/view?usp=sharing">https://drive.google.com/file/d/1HULgTeENzh3tGrNMneSqoOs3D_XNICU-/view?usp=sharing</a> </p>
<p>ipt檔:<a href="https://drive.google.com/file/d/11L6R_NlkVavxR1QjsBnwVqe7aqBPAduU/view?usp=sharing">https://drive.google.com/file/d/11L6R_NlkVavxR1QjsBnwVqe7aqBPAduU/view?usp=sharing</a> </p>
<p>後續將進行程式編寫，以配合整體輸送帶的運作流程。</p>
<h2>W7</h2>
<h3>push more easily</h3>
<p>因組長需推送更新至組員倉儲及維護heroku網頁，可利用建立批次檔節省時間，如下。</p>
<p>將下列存入Y槽中，存為push.bat。</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git push 40823123
git push 40823116
git push 40823136
git push heroku
</pre>
<p><img alt="" height="744" src="/images/push more easily.png" width="578"/></p>
<p>於隨身系統倉儲資料夾中輸入指令push即可使用，以便節省時間。</p>
<h3>程式控制</h3>
<p>運輸小車</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/0r_2b2W192o" title="YouTube video player" width="560"></iframe></p>
<h2>W8</h2>
<h3>使用鍵盤程式控制小車移動</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/h55FSeGb_FU" title="YouTube video player" width="560"></iframe></p>
<h2>W9</h2>
<h3>成果(自動化生產線速率程式控制小車ver.)</h3>
<p>場景檔:<a href="https://drive.google.com/file/d/1S2tbA13XlZ3vy5mn0iWbZ6yM0EBS_wDQ/view?usp=sharing">速率控制版本</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/aYc9zRlRp4o" title="YouTube video player" width="560"></iframe></p>
<h3>成果(自動化生產線鍵盤程式控制小車ver.)</h3>
<p>場景檔:<a href="https://drive.google.com/file/d/1PAFOR7fcvU64vILdy1xCHxGaWyzhrd55/view">鍵盤控制版本</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/anxSaGoiDPM" title="YouTube video player" width="560"></iframe></p>
<h3>心得</h3>
<p>此次專案很遺憾的是沒能達成理想中的生產線(以sensor控制整個生產線運作)，因程式基礎薄弱，無法使用sensor控制，因此先以折衷的方式，以簡單的基礎作動方式做起，預計八人專案將更深入研究sensor控制的部分，已完成理想中的效果。</p>
<h1>Stage3</h1>
<h2>W10</h2>
<h3>task1</h3>
<p>利用python程式<span>讀取 <a href="http://mde.tw/cd2021/downloads/stage3/stage3_2a.txt">stage3_2a.txt</a>，建立 Stage3 的分組倉儲，分組網頁，以及各組員倉儲及網頁連結。</span></p>
<p><span>成果壓縮檔:<a href="https://github.com/40823131/cd2021/blob/1222b289d17f6bf0853732e264b564458d3a8e37/downloads/task1.7z">task1.7z</a></span></p>
<p><span>講解影片:</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/WF1aijVRNG8" title="YouTube video player" width="560"></iframe></p>
<p><strong>程式碼(version1)</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char4
# no encoding = "UTF- 08" is needed
with open("stage3_2a.txt") as fh:
    # readlines will read into the whole line and put into list format 23
    # has \n at the end of each line 13
    data = fh.readlines()
#print(len(data))1
for i in range(len(data)):
    group = data[i].rstrip("\n").split("\t")
    print('&lt;p&gt;'+group[0]+'|&lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;網站&lt;/a&gt;|&lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
    for j in range(2,18,2):
        print('&lt;p&gt;'+group[j]+'|Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+'|Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')
</pre>
<p><strong>程式碼(version2)</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char4
# no encoding = "UTF-08" is needed
with open("stage3_2a.txt") as fh:
    # readlines will read into the whole line and put into list format 23
    # has \n at the end of each line 13
    data = fh.readlines()
    data = [a.replace('4823122','40823122') for a in data]
    data = [c.replace('\t\t\t\t','') for c in data]
    print(data)
#print(len(data))1
for i in range(len(data)):
    group = data[i].rstrip("\n").split("\t")
    print('&lt;p&gt;'+group[0]+'|&lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;網站&lt;/a&gt;|&lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
# the following will use group data to generate needed html

    for j in range(2,18,2):
        try:
            print('&lt;p&gt;'+group[j]+'|Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+'|Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')
        except:
            continue</pre>
<p><strong>程式碼(version3)</strong></p>
<p><strong>新增各組員協同分組網站。</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char
# no encoding = "UTF-8" is needed
with open("stage3_2a.txt") as fh:
    #開啟stage3_2a.txt檔案並命名為fh,並且使用with語法無需使用關閉語法cloce(),文件開啟後會自動關閉.
    data = fh.readlines()
    #讀取文件的每一行,直到遇到结束符 EOF.
    data = [a.replace('4823122','40823122') for a in data]
    #利用取代(replace)修正讀取出的錯誤學號.
    data = [c.replace('\t\t\t\t','') for c in data]
    #其中一組為六人,因此需消除列表中的多餘空格.
    #print(data)
#print(len(data))
for i in range(len(data)):
    #以range為len(data)=6進行迴圈,變數為i
    group = data[i].rstrip("\n").split("\t")
    #取data list中的第i項進行處理,去除元素中的\n,並利用\n為依據,分割元素成為新串列.
    print('&lt;p&gt;'+group[0]+' | &lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0][9]+'"&gt;網站&lt;/a&gt; | &lt;a href="https://github.com/'+group[2]+'/stage3-ag'+group[0][9]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
    #使用print依序索引group list中的元素,放入html格式,並依序打印出來.

    for j in range(2,18,2):
    #以2為起始每次加2加到&lt;18,也就是執行迴圈8次.
        #try:
            print('&lt;p&gt;'+group[j]+' | Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+' | Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+' | Group Website:'+'&lt;a href="https://'+group[j]+'.github.io/stage3-ag'+group[0][9]+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')
    #依序索引group list中的元素放入html格式,並打印出來.
        except:
            continue
    #有一組為六人,因此此處會出現out of range錯誤,需使用try...except語法解決.
#try...except語法為若try下方敘述執行錯誤,則執行except下方敘述,此處我需要迴圈繼續,因此使用continue.</pre>
<p><strong>程式碼(version4)</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># open file, default is read mode, since txt content no chinese char4
# no encoding = "UTF-08" is needed
with open("stage3_2a.txt") as fh:
    #開啟stage3_2a.txt檔案並命名為fh,並且使用with語法無需使用關閉語法cloce(),文件開啟後會自動關閉.
    data = fh.readlines()
    #讀取文件的每一行,直到遇到结束符 EOF.
    data = [a.replace('4823122','40823122') for a in data]
    #利用取代(replace)修正讀取出的錯誤學號.
    data = [c.replace('\t\t\t\t','') for c in data]
    #其中一組為六人,因此需消除列表中的多餘空格.
    data = [b.replace('_','-') for b in data]
    #將_取代為-,以便後續存取.
    #print(data)
#print(len(data))
for i in range(len(data)):
    group = data[i].rstrip("\n").split("\t")
    #print(group)
    print('&lt;p&gt;'+group[0]+' | &lt;a href="https://'+group[1]+'.github.io/stage3-ag'+group[0]+'"&gt;網站&lt;/a&gt; | &lt;a href="https://github.com/'+group[2]+'/'+group[0]+'"&gt;倉儲&lt;/a&gt;&lt;/p&gt;')
# the following will use group data to generate needed html

    for j in range(2,18,2):
        #try:
            print('&lt;p&gt;'+group[j]+' | Website:'+'&lt;a href="https://'+group[j]+'.github.io/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+' | Repository:'+'&lt;a href="https://github.com/'+group[j]+'/cd2021'+'"&gt;'+group[j]+'&lt;/a&gt;'+' | Group Website:'+'&lt;a href="https://'+group[j]+'.github.io/'+group[0]+'"&gt;'+group[j]+'&lt;/a&gt;&lt;/p&gt;')
        except:
            continue
 #有一組為六人,因此此處會出現out of range錯誤,需使用try...except語法解決.
#try...except語法為若try下方敘述執行錯誤,則執行except下方敘述,此處我需要迴圈繼續,因此使用continue.            
            </pre>
<p><strong>成果:</strong></p>
<p>stage3-ag1 | <a href="https://40823131.github.io/stage3-agstage3-ag1">網站</a> | <a href="https://github.com/40823131/stage3-ag1">倉儲</a></p>
<p>40823131 | Website:<a href="https://40823131.github.io/cd2021">40823131</a> | Repository:<a href="https://github.com/40823131/cd2021">40823131</a> | Group Website:<a href="https://40823131.github.io/stage3-ag1">40823131</a></p>
<p>a40823112 | Website:<a href="https://a40823112.github.io/cd2021">a40823112</a> | Repository:<a href="https://github.com/a40823112/cd2021">a40823112</a> | Group Website:<a href="https://a40823112.github.io/stage3-ag1">a40823112</a></p>
<p>40823123 | Website:<a href="https://40823123.github.io/cd2021">40823123</a> | Repository:<a href="https://github.com/40823123/cd2021">40823123</a> | Group Website:<a href="https://40823123.github.io/stage3-ag1">40823123</a></p>
<p>40823145 | Website:<a href="https://40823145.github.io/cd2021">40823145</a> | Repository:<a href="https://github.com/40823145/cd2021">40823145</a> | Group Website:<a href="https://40823145.github.io/stage3-ag1">40823145</a></p>
<p>40823136 | Website:<a href="https://40823136.github.io/cd2021">40823136</a> | Repository:<a href="https://github.com/40823136/cd2021">40823136</a> | Group Website:<a href="https://40823136.github.io/stage3-ag1">40823136</a></p>
<p>40823109 | Website:<a href="https://40823109.github.io/cd2021">40823109</a> | Repository:<a href="https://github.com/40823109/cd2021">40823109</a> | Group Website:<a href="https://40823109.github.io/stage3-ag1">40823109</a></p>
<p>40823116 | Website:<a href="https://40823116.github.io/cd2021">40823116</a> | Repository:<a href="https://github.com/40823116/cd2021">40823116</a> | Group Website:<a href="https://40823116.github.io/stage3-ag1">40823116</a></p>
<p>40823108 | Website:<a href="https://40823108.github.io/cd2021">40823108</a> | Repository:<a href="https://github.com/40823108/cd2021">40823108</a> | Group Website:<a href="https://40823108.github.io/stage3-ag1">40823108</a></p>
<p>stage3-ag2 | <a href="https://40823151.github.io/stage3-agstage3-ag2">網站</a> | <a href="https://github.com/40823151/stage3-ag2">倉儲</a></p>
<p>40823151 | Website:<a href="https://40823151.github.io/cd2021">40823151</a> | Repository:<a href="https://github.com/40823151/cd2021">40823151</a> | Group Website:<a href="https://40823151.github.io/stage3-ag2">40823151</a></p>
<p>40623121 | Website:<a href="https://40623121.github.io/cd2021">40623121</a> | Repository:<a href="https://github.com/40623121/cd2021">40623121</a> | Group Website:<a href="https://40623121.github.io/stage3-ag2">40623121</a></p>
<p>40871106 | Website:<a href="https://40871106.github.io/cd2021">40871106</a> | Repository:<a href="https://github.com/40871106/cd2021">40871106</a> | Group Website:<a href="https://40871106.github.io/stage3-ag2">40871106</a></p>
<p>40823102 | Website:<a href="https://40823102.github.io/cd2021">40823102</a> | Repository:<a href="https://github.com/40823102/cd2021">40823102</a> | Group Website:<a href="https://40823102.github.io/stage3-ag2">40823102</a></p>
<p>40823104 | Website:<a href="https://40823104.github.io/cd2021">40823104</a> | Repository:<a href="https://github.com/40823104/cd2021">40823104</a> | Group Website:<a href="https://40823104.github.io/stage3-ag2">40823104</a></p>
<p>40823106 | Website:<a href="https://40823106.github.io/cd2021">40823106</a> | Repository:<a href="https://github.com/40823106/cd2021">40823106</a> | Group Website:<a href="https://40823106.github.io/stage3-ag2">40823106</a></p>
<p>40823101 | Website:<a href="https://40823101.github.io/cd2021">40823101</a> | Repository:<a href="https://github.com/40823101/cd2021">40823101</a> | Group Website:<a href="https://40823101.github.io/stage3-ag2">40823101</a></p>
<p>40823132 | Website:<a href="https://40823132.github.io/cd2021">40823132</a> | Repository:<a href="https://github.com/40823132/cd2021">40823132</a> | Group Website:<a href="https://40823132.github.io/stage3-ag2">40823132</a></p>
<p>stage3-ag3 | <a href="https://40823119.github.io/stage3-agstage3-ag3">網站</a> | <a href="https://github.com/40823119/stage3-ag3">倉儲</a></p>
<p>40823119 | Website:<a href="https://40823119.github.io/cd2021">40823119</a> | Repository:<a href="https://github.com/40823119/cd2021">40823119</a> | Group Website:<a href="https://40823119.github.io/stage3-ag3">40823119</a></p>
<p>40823150 | Website:<a href="https://40823150.github.io/cd2021">40823150</a> | Repository:<a href="https://github.com/40823150/cd2021">40823150</a> | Group Website:<a href="https://40823150.github.io/stage3-ag3">40823150</a></p>
<p>40823103 | Website:<a href="https://40823103.github.io/cd2021">40823103</a> | Repository:<a href="https://github.com/40823103/cd2021">40823103</a> | Group Website:<a href="https://40823103.github.io/stage3-ag3">40823103</a></p>
<p>40823107 | Website:<a href="https://40823107.github.io/cd2021">40823107</a> | Repository:<a href="https://github.com/40823107/cd2021">40823107</a> | Group Website:<a href="https://40823107.github.io/stage3-ag3">40823107</a></p>
<p>40523252 | Website:<a href="https://40523252.github.io/cd2021">40523252</a> | Repository:<a href="https://github.com/40523252/cd2021">40523252</a> | Group Website:<a href="https://40523252.github.io/stage3-ag3">40523252</a></p>
<p>40823154 | Website:<a href="https://40823154.github.io/cd2021">40823154</a> | Repository:<a href="https://github.com/40823154/cd2021">40823154</a> | Group Website:<a href="https://40823154.github.io/stage3-ag3">40823154</a></p>
<p>stage3-ag4 | <a href="https://40823142.github.io/stage3-agstage3-ag4">網站</a> | <a href="https://github.com/40823142/stage3-ag4">倉儲</a></p>
<p>40823142 | Website:<a href="https://40823142.github.io/cd2021">40823142</a> | Repository:<a href="https://github.com/40823142/cd2021">40823142</a> | Group Website:<a href="https://40823142.github.io/stage3-ag4">40823142</a></p>
<p>40823144 | Website:<a href="https://40823144.github.io/cd2021">40823144</a> | Repository:<a href="https://github.com/40823144/cd2021">40823144</a> | Group Website:<a href="https://40823144.github.io/stage3-ag4">40823144</a></p>
<p>40823127 | Website:<a href="https://40823127.github.io/cd2021">40823127</a> | Repository:<a href="https://github.com/40823127/cd2021">40823127</a> | Group Website:<a href="https://40823127.github.io/stage3-ag4">40823127</a></p>
<p>40823148 | Website:<a href="https://40823148.github.io/cd2021">40823148</a> | Repository:<a href="https://github.com/40823148/cd2021">40823148</a> | Group Website:<a href="https://40823148.github.io/stage3-ag4">40823148</a></p>
<p>40823121 | Website:<a href="https://40823121.github.io/cd2021">40823121</a> | Repository:<a href="https://github.com/40823121/cd2021">40823121</a> | Group Website:<a href="https://40823121.github.io/stage3-ag4">40823121</a></p>
<p>40823135 | Website:<a href="https://40823135.github.io/cd2021">40823135</a> | Repository:<a href="https://github.com/40823135/cd2021">40823135</a> | Group Website:<a href="https://40823135.github.io/stage3-ag4">40823135</a></p>
<p>40823114 | Website:<a href="https://40823114.github.io/cd2021">40823114</a> | Repository:<a href="https://github.com/40823114/cd2021">40823114</a> | Group Website:<a href="https://40823114.github.io/stage3-ag4">40823114</a></p>
<p>40823146 | Website:<a href="https://40823146.github.io/cd2021">40823146</a> | Repository:<a href="https://github.com/40823146/cd2021">40823146</a> | Group Website:<a href="https://40823146.github.io/stage3-ag4">40823146</a></p>
<p>stage3-ag5 | <a href="https://40823111.github.io/stage3-agstage3-ag5">網站</a> | <a href="https://github.com/40823111/stage3-ag5">倉儲</a></p>
<p>40823111 | Website:<a href="https://40823111.github.io/cd2021">40823111</a> | Repository:<a href="https://github.com/40823111/cd2021">40823111</a> | Group Website:<a href="https://40823111.github.io/stage3-ag5">40823111</a></p>
<p>40823115 | Website:<a href="https://40823115.github.io/cd2021">40823115</a> | Repository:<a href="https://github.com/40823115/cd2021">40823115</a> | Group Website:<a href="https://40823115.github.io/stage3-ag5">40823115</a></p>
<p>40823128 | Website:<a href="https://40823128.github.io/cd2021">40823128</a> | Repository:<a href="https://github.com/40823128/cd2021">40823128</a> | Group Website:<a href="https://40823128.github.io/stage3-ag5">40823128</a></p>
<p>40823120 | Website:<a href="https://40823120.github.io/cd2021">40823120</a> | Repository:<a href="https://github.com/40823120/cd2021">40823120</a> | Group Website:<a href="https://40823120.github.io/stage3-ag5">40823120</a></p>
<p>40823140 | Website:<a href="https://40823140.github.io/cd2021">40823140</a> | Repository:<a href="https://github.com/40823140/cd2021">40823140</a> | Group Website:<a href="https://40823140.github.io/stage3-ag5">40823140</a></p>
<p>40823124 | Website:<a href="https://40823124.github.io/cd2021">40823124</a> | Repository:<a href="https://github.com/40823124/cd2021">40823124</a> | Group Website:<a href="https://40823124.github.io/stage3-ag5">40823124</a></p>
<p>40823139 | Website:<a href="https://40823139.github.io/cd2021">40823139</a> | Repository:<a href="https://github.com/40823139/cd2021">40823139</a> | Group Website:<a href="https://40823139.github.io/stage3-ag5">40823139</a></p>
<p>40823126 | Website:<a href="https://40823126.github.io/cd2021">40823126</a> | Repository:<a href="https://github.com/40823126/cd2021">40823126</a> | Group Website:<a href="https://40823126.github.io/stage3-ag5">40823126</a></p>
<p>stage3-ag6 | <a href="https://40823152.github.io/stage3-agstage3-ag6">網站</a> | <a href="https://github.com/40823152/stage3-ag6">倉儲</a></p>
<p>40823152 | Website:<a href="https://40823152.github.io/cd2021">40823152</a> | Repository:<a href="https://github.com/40823152/cd2021">40823152</a> | Group Website:<a href="https://40823152.github.io/stage3-ag6">40823152</a></p>
<p>40823110 | Website:<a href="https://40823110.github.io/cd2021">40823110</a> | Repository:<a href="https://github.com/40823110/cd2021">40823110</a> | Group Website:<a href="https://40823110.github.io/stage3-ag6">40823110</a></p>
<p>40823122 | Website:<a href="https://40823122.github.io/cd2021">40823122</a> | Repository:<a href="https://github.com/40823122/cd2021">40823122</a> | Group Website:<a href="https://40823122.github.io/stage3-ag6">40823122</a></p>
<p>40823125 | Website:<a href="https://40823125.github.io/cd2021">40823125</a> | Repository:<a href="https://github.com/40823125/cd2021">40823125</a> | Group Website:<a href="https://40823125.github.io/stage3-ag6">40823125</a></p>
<p>40823117 | Website:<a href="https://40823117.github.io/cd2021">40823117</a> | Repository:<a href="https://github.com/40823117/cd2021">40823117</a> | Group Website:<a href="https://40823117.github.io/stage3-ag6">40823117</a></p>
<p>40823129 | Website:<a href="https://40823129.github.io/cd2021">40823129</a> | Repository:<a href="https://github.com/40823129/cd2021">40823129</a> | Group Website:<a href="https://40823129.github.io/stage3-ag6">40823129</a></p>
<p>40823149 | Website:<a href="https://40823149.github.io/cd2021">40823149</a> | Repository:<a href="https://github.com/40823149/cd2021">40823149</a> | Group Website:<a href="https://40823149.github.io/stage3-ag6">40823149</a></p>
<p>40823153 | Website:<a href="https://40823153.github.io/cd2021">40823153</a> | Repository:<a href="https://github.com/40823153/cd2021">40823153</a> | Group Website:<a href="https://40823153.github.io/stage3-ag6">40823153</a></p>
<h3>task2-1</h3>
<p><span>將個人在 stage1 與 stage2 所完成的 coppeliasim 場景, 採 Python remote API 進行操控.</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/1hFdsrUOOTM" title="YouTube video player" width="560"></iframe></p>
<p>Python remote API程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
# child threaded script: 
#simExtRemoteApiStart(19997)
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('192.168.50.154', 19997, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    sys.exit('Could not connect')
 
errorCode,U_motor_handle=vrep.simxGetObjectHandle(clientID,'U',vrep.simx_opmode_oneshot_wait)
 
errorCode,D_motor_handle=vrep.simxGetObjectHandle(clientID,'D',vrep.simx_opmode_oneshot_wait)
 
if errorCode == -1:
    print('Can not find U or D motor')
    sys.exit()
 
errorCode=vrep.simxSetJointTargetVelocity(clientID,U_motor_handle,0, vrep.simx_opmode_oneshot_wait)
errorCode=vrep.simxSetJointTargetVelocity(clientID,D_motor_handle,0, vrep.simx_opmode_oneshot_wait)
</pre>
<h2>W11</h2>
<h3>task2-2</h3>
<p>利用Python Remote API，控制機械手臂。</p>
<p>程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import sim as vrep
import sys
import math
# child threaded script: 
#simExtRemoteApiStart(19999)
 
vrep.simxFinish(-1)
 
clientID = vrep.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
 
if clientID!= -1:
    print("Connected to remote server")
else:
    print('Connection not successful')
    sys.exit('Could not connect')

vrep.simxStartSimulation(clientID, vrep.simx_opmode_oneshot)

RC1, UR5_joint1_Handle = vrep.simxGetObjectHandle(clientID, 'Dobot_motor1', vrep.simx_opmode_blocking)
RC2, UR5_joint2_Handle = vrep.simxGetObjectHandle(clientID, 'Dobot_motor2', vrep.simx_opmode_blocking)
RC3, UR5_joint3_Handle = vrep.simxGetObjectHandle(clientID, 'Dobot_motor3', vrep.simx_opmode_blocking)
RC4, UR5_joint4_Handle = vrep.simxGetObjectHandle(clientID, 'Dobot_motor4', vrep.simx_opmode_blocking)

vrep.simxSetJointTargetPosition(clientID,UR5_joint1_Handle,0*math.pi/180,vrep.simx_opmode_oneshot)
vrep.simxSetJointTargetPosition(clientID,UR5_joint2_Handle,0*math.pi/180,vrep.simx_opmode_oneshot)
vrep.simxSetJointTargetPosition(clientID,UR5_joint3_Handle,0*math.pi/180,vrep.simx_opmode_oneshot)
vrep.simxSetJointTargetPosition(clientID,UR5_joint4_Handle,0*math.pi/180,vrep.simx_opmode_oneshot)</pre>
<p>影片:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/FC-_oYJnV04" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h2>W12</h2>
<h3>直播教學影片</h3>
<p><span>利用虛擬主機建立Ethercalc伺服器&amp;task1&amp;利用Python Remote API程式控制機械手臂除錯測試。</span></p>
<p><span>最後在直播中找到機械手臂Python Remote API程式中的vrep.simx_opmode_oneshot沒有加上_wait導致作動秒數過短，無法順利作動，修改後即可正常操控。</span></p>
<p><span><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/KI5hpfMHjgo" title="YouTube video player" width="560"></iframe></span></p>
<h2>W13</h2>
<p>因近日coronavirus疫情再度爆發,因此採用OBS配合youtube進行串流直播進行遠距教學.</p>
<h3>task3-About OBS setting videos</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/SECSFCB9cn8" title="YouTube video player" width="560"></iframe></p>
<h3>Use aegisub to edit and generate subtitles</h3>
<p><span class="Y2IQFc" lang="en"></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/q5VcnCf6iaY" title="YouTube video player" width="560"></iframe></p>
<h1>W14</h1>
<p>目標:</p>
<p>1.請簡化上列四軸機械手臂取放方塊零件的 Lua 程式, 去除客製化控制 plugin 語法部分, 且刪除其舊有的 GUI 程式控制介面, 改用 CoppeliaSim 制式的 Lua Script 編寫與原先取放方塊零件相同的操控流程.</p>
<p>2.請採用 CoppeliaSim<span> </span><a href="https://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm">Qt based GUI 介面</a>, 改寫原<span> </span><a href="https://github.com/CoppeliaRobotics/models/blob/master/robots/non-mobile/MTB%20robot.ttm">MTB robot.ttm</a><span> </span>模型中的 legacy GUI 介面視窗.</p>
<p>關於Qt based GUI的資料:</p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm">https://www.coppeliarobotics.com/helpFiles/en/customUIPlugin.htm</a></p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/simUI-widgets.htm">https://www.coppeliarobotics.com/helpFiles/en/simUI-widgets.htm</a></p>
<p>關於joint control MTB:</p>
<p><a href="https://forum.coppeliarobotics.com/viewtopic.php?t=4749">https://forum.coppeliarobotics.com/viewtopic.php?t=4749</a></p>
<p> </p>
<h1>W15</h1>
<p>本週進度:字幕翻譯並整理。</p>
<p>part1:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/IKOGwoJ2HLk" title="YouTube video player" width="560"></iframe></p>
<p><span>字幕整理:</span></p>
<p><br/>We saw this simple two-link robot in the previous lecture about forward kinematics.</p>
<p>我們在上一堂關於正向運動學的課程中看到這個簡單的雙連桿機構。</p>
<p>Kinematics : 運動學</p>
<p>The tooltip pose of this robot is described simply by two numbers, the coordinates x and y with respect to the world coordinate frame.</p>
<p>該機構的提示框由兩個數字簡單描述，相對於絕對坐標系的坐標 x 和 y。</p>
<p>So, the problem here is that given x and y, we want to determine the joined angles, q1 and q2.</p>
<p>所以，這裡的問題是有了x和y條件，我們要求解連接角q1和q2的值為多少。</p>
<p>The solution that we’re going to follow in this particular section is a geometric one.</p>
<p>我們利用特定幾何來解決這個問題。</p>
<p>We’re going to start with a simple piece of construction.</p>
<p>我們從一個簡單的結構開始。</p>
<p>We’re going to overlay the red triangle on top of our robot.</p>
<p>我們將在機構上覆蓋紅色三角形。</p>
<p>We know that the end point coordinate is x, y, so the vertical height of the triangle is y, the horizontal width is x.</p>
<p>我們知道最終坐標是x，y，所以三角形的垂直高度為y，水平寬度為x。</p>
<p>And, using Pythagoras theorem, we can write r squared equals x squared plus y squared.</p>
<p>然後，利用Pythagorean theorem(畢氏定理)，我們可寫出 r² = x ²+ y²。</p>
<p>So far, so easy.</p>
<p>到目前為止都很容易。</p>
<p>Now, w’re going to look at this triangle highlighted here in red and we want to determine the angle alpha.</p>
<p>現在，我們查看此處凸顯的紅色三角形，並且要確定α角。</p>
<p>(α=alpha)</p>
<p>In order to do that, we need to use the cosine rule.</p>
<p>為了做到這一點，我們須使用餘弦定理。<br/>(餘弦=cosine)</p>
<p>And, if you’re a little rusty on the cosine rule, here is a bit of a refresher.</p>
<p>如果你對餘弦定理有點生疏，這裡可以幫助你複習一下。</p>
<p>We have an arbitrary triangle.</p>
<p>有一個任意三角形。</p>
<p>We don’t have any right angles in it and we’re going to label the length of this edge as A and the angle opposite that edge, we’re going to label as little a.</p>
<p>三角形中沒有任何的直角，將這邊的角度標為小a，而對邊的長度標為A。</p>
<p>And, we do the same for this edge and this angle, and this edge and this angle.</p>
<p>我們再對這邊和這個角，以及這邊和這個叫做同樣的事。</p>
<p>So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c.</p>
<p>以此類推，所有邊都標記為A, B, C，角都標記為a, b, c 。</p>
<p>So, the cosine rule is simply this relationship here.</p>
<p>餘弦定理就是這種關係。</p>
<p>It’s a bit like Pythagoras’ theorem except for this extra term on the end with the cos a in it.</p>
<p>它有點像畢達哥拉斯定理，不同之處是末端多出了cos a。</p>
<p>Now, let’s apply the cosine rule to the particular triangle we looked at a moment ago.</p>
<p>將餘弦定理套用於剛剛看到的特定三角形。</p>
<p>It’s pretty straightforward to write down this particular relationship.</p>
<p>寫下此特殊關係很簡單。</p>
<p>We can isolate the term cos alpha which gives us the angle alpha that we’re interested in.</p>
<p>我們可分離出 cosα ，只需要得知α角度作為條件。</p>
<p>And, it’s defined in terms of the constant link lengths, A1 and A2 and the position of the end effector, x and y.</p>
<p>它是根據恆定連桿長度A1和A2以及最終執行器的位置x和y定義。</p>
<p>We can write this simple relationship between the angles alpha and q2.</p>
<p>我們可寫出角度α和q2之間的簡單關係。</p>
<p>And, we know from the shape of the cosine function that cos of q2 must be equal to negative of cos alpha.</p>
<p>並且我們從餘弦函數中得知cos q2必須等於 –cos α。</p>
<p>This time, let’s just write an expression for the cosine of the joined angle q2.</p>
<p>這次寫出餘弦在連接角q2的表達式。</p>
<p>Now, we’re going to draw yet another red triangle and we’re going apply some simple trigonometry here.</p>
<p>我們繪製另一個紅色三角形，並應用三角函數。</p>
<p>If we know q2, then we know this length and this length of the red triangle.</p>
<p>如果我們知道q2，就可知道這個長度和這個三角形的長度。</p>
<p>We can write this relationship for the sine of the joined angle q2.</p>
<p>我們可以在連接角q2寫出正弦關係。</p>
<p>Now, we can consider this bigger triangle whose angle is beta and this side length of this triangle is given here in blue.</p>
<p>現在我們考慮這個大一點的三角形，它角度是β，此三角形的邊長由藍色表示。</p>
<p>(β=beta)</p>
<p>And, the length of the other side of the triangle is this.</p>
<p>且三角形另一邊長度是這個。</p>
<p>So, now we can write an expression for the angle beta in terms of these parameters here.</p>
<p>我們可在此根據參數寫出角度β的表達式。</p>
<p>Going back to the red triangle that we drew earlier, we can establish a relationship between q1 and the angle beta.</p>
<p>回到之前畫的紅色三角形，我們可建立出q1和β的關係。</p>
<p>Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y.</p>
<p>引入另一個角度ɣ，可寫出角度ɣ和提示框座標x和y之間的關係。</p>
<p>(ɣ=gamma)</p>
<p>Now, we can write a simple relationship between the angles that we’ve constructed, gamma and beta and the joined angle we’re interested in which is q1.</p>
<p>現在我們可建構出角度β和ɣ與連接角度q1之間的關係。</p>
<p>And, the total relationship looks something like this.</p>
<p>而且，整個關係看起來像這樣。</p>
<p>Quite a complex relationship, it gives us the angle of joined one, that’s q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it’s also a function of the second joint angle, q2.</p>
<p>相當複雜的關係，它提供連接的角度，即最終執行器坐標 y 和 x 的 q1，以及一系列常數 a1 和 a2，它也是第二個關節角度 q2 的函數。</p>
<p>So, let’s summarize what it is that we have derived here.</p>
<p>所以，總結我們在這裡得出了什麼。</p>
<p>We have an expression for the cosine of q2 and we have an expression for q1.</p>
<p>我們有q2餘弦方程式與q1方程式。</p>
<p>Now, the cosine function is symmetrical about 0.</p>
<p>餘弦函數在0對稱。</p>
<p>So, if we know the value of the cosine of q2, then there are two possible solutions a positive angle and a negative angle.</p>
<p>所以我們知道cosq2的值可能為正角和負角。</p>
<p>We’re going to explicitly choose the positive angle. Which means that I can write this expression here.</p>
<p>我們選擇正角，表示我可以寫出此表達式。</p>
<p>And now, we have what we call the inverse kinematic solution for this two-link robot.</p>
<p>現在我們能用逆向運動學來解決雙連桿機構。</p>
<p>(逆向運動學=inverse kinematic,IK)</p>
<p>We have an expression for the two joined angles, q1 and q2 in terms of the end effector pose x and y, and a bunch of constants.</p>
<p>我們有兩個連接角 q1 和 q2 的表達式，根據最終執行器的x 和 y 以及一系列常數。</p>
<p>You notice that the two equations are not independent.</p>
<p>你要注意到兩方程式不是獨立的。</p>
<p>The equation for q1, in fact, depends on the solution for q2.</p>
<p>事實上，q1方程式取決於q2的解。</p>
<p>In this case, q2 is negative and we’re going to write the solution for q2 with a negative sign in front of the inverse cosine.</p>
<p>在這情況下，q2為負，我們將在q2反餘弦的解前面加上負號。</p>
<p>Now, we need to solve for q1, so we’re going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x.</p>
<p>我們需求解q1，因此采用這個特定的三角形，之前求解的角度β以及根據y和x定義的角度ɣ。</p>
<p>Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before.</p>
<p>q1、ɣ和β之間的關西，和之前求的不同。</p>
<p>There’s a change of sign involved.</p>
<p>涉及到符號的變化。</p>
<p>Then, we can substitute all that previous equation and come up with this expression for q1.</p>
<p>然後我們可代換之前所有等式，並求得此q1方程式。</p>
<p>Again, there is a change of sign here.</p>
<p>同樣，這裡的符號發生了變化。</p>
<p>Previously, this was a negative sign.</p>
<p>先前，這是個負號。</p>
<p>And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative.</p>
<p>這是雙連桿機構在此逆向運動學的總形式，其中q2為負。</p>
<p>Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative.</p>
<p>讓我們比較兩個解決方案，q2為正和q2為負的情況。</p>
<p>part2:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eIZuz1XCd0w" title="YouTube video player" width="560"></iframe></p>
<p>字幕整理:</p>
<p>Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry .</p>
<p>在這裡，我們有與前一篇相同的兩連桿機械手臂，但這次我們將使用分析方法來解決它，意味著我們將更多地依賴代數，特別是使用線性代數而不是幾何。</p>
<p>We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations .</p>
<p>我們有一個表達式 E，它是表示機械手臂最終位置的齊次變換式，我們在上一課中看到了這一點，我們可以將最終位置寫為一系列基本齊次變換式。</p>
<p>A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2 .</p>
<p>Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。</p>
<p>If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector.</p>
<p>如果我將其展開，將所有變換相乘，就會得到此處所示的表達式 E ;它是一個三乘三的齊次變換矩陣，表示機械手臂的最終的位置。</p>
<p>Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out .</p>
<p>現在對於這個特殊的兩連桿機器人，我們只對它的最終位置感興趣，與它有關的是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。</p>
<p>So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this .</p>
<p>所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式。</p>
<p>Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2.</p>
<p>現在我可以根據最終位置X和Y以及機械手臂的常數A1及A2來求出關節角度Q2。</p>
<p>Now what I'm going to do is apply the sum of angles identity .</p>
<p>現在我要做的是應用角度之和的特性。</p>
<p>I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2.</p>
<p>我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了讓生活更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2。</p>
<p>It's a fairly common shorthand when people are looking at robot kinematic equations.</p>
<p>當人們解決機械手臂運動學方程式時，這是一個相當常見的快速記法。</p>
<p>And here are the equations after making those substitutions.</p>
<p>這是進行替換後的方程式。</p>
<p>Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution.</p>
<p>看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方案。</p>
<p>So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case.</p>
<p>所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方程，在這種特殊情況下，x 相當於 theta。</p>
<p>Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression.</p>
<p>這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式。</p>
<p>So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1.</p>
<p>因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。</p>
<p>And it is the same expression that I got following the geometric approach in the previous section.</p>
<p>這與我在上一節中遵循幾何方法求出的表達式一模一樣。</p>
<h1>Basic teaching</h1>
<h2>Create SSH KEY</h2>
<p>You can refer to:<a href="https://40823131.github.io/wcm2020/content/%E7%94%A2%E7%94%9FSSH%20KEY.html">Create SSH KEY</a></p>
<h2>Setting up putty for ssh</h2>
<p>You can refer to:<a href="https://40823131.github.io/wcm2020/content/SSH%20Putty%E8%A8%AD%E5%AE%9A.html">Setting up putty for ssh</a></p>
<h2>Use Leo Editor to create a web blog</h2>
<p>You can refer to:<a href="https://40823131.github.io/wcm2020/content/%E4%BD%BF%E7%94%A8Leo%20Editor%E7%B7%A8%E8%AD%AFpelican.leo%E5%BB%BA%E7%AB%8Bblog%E7%B6%B2%E8%AA%8C.html">Use Leo Editor to create a web blog</a></p>
<h2>Android phone camera instead of webcam teaching</h2>
<p>You can refer to:<a href="https://40823131.github.io/wcm2020g1/content/Android%E6%89%8B%E6%A9%9F%E9%8F%A1%E9%A0%AD%E4%BB%A3%E6%9B%BFwebcam%E6%95%99%E5%AD%B8.html">Android phone camera instead of webcam teaching</a></p>
<h1>Python grammar sort out</h1>
<p>You can refer to:<a href="https://40823131.github.io/wvp2021/content/">wvp2021</a></p>